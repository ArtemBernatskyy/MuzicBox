export const SET_IS_PLAYING = "SET_IS_PLAYING"; // toggles true/false, controls if is playing or not
export const SET_SONGS = "SET_SONGS"; // sets provided songs to state.songs
export const MERGE_SONGS = "MERGE_SONGS"; // merge next pagination of songs with state.songs
export const PLAY_NEXT = "PLAY_NEXT"; // starts playing provided song and retrives description via song.id
export const TOGGLE_MENU = "TOGGLE_MENU"; // defines if left menu is open
export const SEARCH_SONG = "SEARCH_SONG"; // searching song in API
export const SET_SEARCH_SONG_VALUE = "SET_SEARCH_SONG_VALUE"; // save search value to redux store
export const TOGGLE_SEARCH_SONG_LOADING = "TOGGLE_SEARCH_SONG_LOADING"; // shows when search has ended
export const SET_PLAYLIST = "SET_PLAYLIST"; // loading songs in to playlist
export const MERGE_ARTISTS = "MERGE_ARTISTS"; // merge next pagination of artists with state.artists
export const SET_ARTISTS = "SET_ARTISTS"; // set artists
export const SET_SEARCH_ARTIST_VALUE = "SET_SEARCH_ARTIST_VALUE"; // set search artist value
export const TOGGLE_SEARCH_ARTIST_LOADING = "TOGGLE_SEARCH_ARTIST_LOADING"; // shows when artist search has ended
export const SET_FILTER_TAG_VALUE = "SET_FILTER_TAG_VALUE"; // set filter value for tag
export const NO_SONGS = "NO_SONGS"; // disables loaders when person has no songs
export const SET_ORDER_TYPE = "SET_ORDER_TYPE"; // setting value for song ordering filter in playlist
export const MERGE_PLAYLIST = "MERGE_PLAYLIST"; // merge next pagination of current playlist
export const TOGGLE_PLAYNEXT_ITEM = "TOGGLE_PLAYNEXT_ITEM"; // if song is in play_next_list then it removes it and vice versa
export const IS_AUTHOR_SEARCH = "IS_AUTHOR_SEARCH"; // defines whether we search only by author or not
export const SCROLL_TO_SONG = "SCROLL_TO_SONG"; // scrolling in to view provided song if it is in current playlist
export const SET_IS_LOADING = "SET_IS_LOADING"; // toggles true/false, controls if is loading or not
